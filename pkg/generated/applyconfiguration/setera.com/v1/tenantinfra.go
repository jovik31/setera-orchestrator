/*
Copyright Joao Vicente.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// TenantInfraApplyConfiguration represents a declarative configuration of the TenantInfra type for use
// with apply.
type TenantInfraApplyConfiguration struct {
	Name        *string                      `json:"name,omitempty"`
	VNI         *int                         `json:"vni,omitempty"`
	VTEP_IP     *string                      `json:"vtep_ip,omitempty"`
	VTEP_MAC    *string                      `json:"vtep_mac,omitempty"`
	BRIDGE_IP   *string                      `json:"bridge_ip,omitempty"`
	BRIDGE_MAC  *string                      `json:"bridge_mac,omitempty"`
	Pods        []Pod_InfoApplyConfiguration `json:"pods,omitempty"`
	Tenant_CIDR *string                      `json:"tenant_cidr,omitempty"`
}

// TenantInfraApplyConfiguration constructs a declarative configuration of the TenantInfra type for use with
// apply.
func TenantInfra() *TenantInfraApplyConfiguration {
	return &TenantInfraApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *TenantInfraApplyConfiguration) WithName(value string) *TenantInfraApplyConfiguration {
	b.Name = &value
	return b
}

// WithVNI sets the VNI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VNI field is set to the value of the last call.
func (b *TenantInfraApplyConfiguration) WithVNI(value int) *TenantInfraApplyConfiguration {
	b.VNI = &value
	return b
}

// WithVTEP_IP sets the VTEP_IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VTEP_IP field is set to the value of the last call.
func (b *TenantInfraApplyConfiguration) WithVTEP_IP(value string) *TenantInfraApplyConfiguration {
	b.VTEP_IP = &value
	return b
}

// WithVTEP_MAC sets the VTEP_MAC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VTEP_MAC field is set to the value of the last call.
func (b *TenantInfraApplyConfiguration) WithVTEP_MAC(value string) *TenantInfraApplyConfiguration {
	b.VTEP_MAC = &value
	return b
}

// WithBRIDGE_IP sets the BRIDGE_IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BRIDGE_IP field is set to the value of the last call.
func (b *TenantInfraApplyConfiguration) WithBRIDGE_IP(value string) *TenantInfraApplyConfiguration {
	b.BRIDGE_IP = &value
	return b
}

// WithBRIDGE_MAC sets the BRIDGE_MAC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BRIDGE_MAC field is set to the value of the last call.
func (b *TenantInfraApplyConfiguration) WithBRIDGE_MAC(value string) *TenantInfraApplyConfiguration {
	b.BRIDGE_MAC = &value
	return b
}

// WithPods adds the given value to the Pods field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Pods field.
func (b *TenantInfraApplyConfiguration) WithPods(values ...*Pod_InfoApplyConfiguration) *TenantInfraApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPods")
		}
		b.Pods = append(b.Pods, *values[i])
	}
	return b
}

// WithTenant_CIDR sets the Tenant_CIDR field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tenant_CIDR field is set to the value of the last call.
func (b *TenantInfraApplyConfiguration) WithTenant_CIDR(value string) *TenantInfraApplyConfiguration {
	b.Tenant_CIDR = &value
	return b
}
