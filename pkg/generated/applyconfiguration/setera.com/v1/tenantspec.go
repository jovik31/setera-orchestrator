/*
Copyright Joao Vicente.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// TenantSpecApplyConfiguration represents a declarative configuration of the TenantSpec type for use
// with apply.
type TenantSpecApplyConfiguration struct {
	Name         *string                  `json:"name,omitempty"`
	VNI          *int                     `json:"vni,omitempty"`
	Zones        *int                     `json:"zones,omitempty"`
	Nodes        []NodeApplyConfiguration `json:"nodes,omitempty"`
	Requirements map[string]string        `json:"selectors,omitempty"`
}

// TenantSpecApplyConfiguration constructs a declarative configuration of the TenantSpec type for use with
// apply.
func TenantSpec() *TenantSpecApplyConfiguration {
	return &TenantSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithName(value string) *TenantSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithVNI sets the VNI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VNI field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithVNI(value int) *TenantSpecApplyConfiguration {
	b.VNI = &value
	return b
}

// WithZones sets the Zones field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Zones field is set to the value of the last call.
func (b *TenantSpecApplyConfiguration) WithZones(value int) *TenantSpecApplyConfiguration {
	b.Zones = &value
	return b
}

// WithNodes adds the given value to the Nodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Nodes field.
func (b *TenantSpecApplyConfiguration) WithNodes(values ...*NodeApplyConfiguration) *TenantSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNodes")
		}
		b.Nodes = append(b.Nodes, *values[i])
	}
	return b
}

// WithRequirements puts the entries into the Requirements field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Requirements field,
// overwriting an existing map entries in Requirements field with the same key.
func (b *TenantSpecApplyConfiguration) WithRequirements(entries map[string]string) *TenantSpecApplyConfiguration {
	if b.Requirements == nil && len(entries) > 0 {
		b.Requirements = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Requirements[k] = v
	}
	return b
}
